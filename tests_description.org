#+title: Libft tests description
* Mandatory part
** ft_isalnum
#+begin_src C
int ft_isalnum(int c);
#+end_src
** ft_isalpha
#+begin_src C
int ft_isalpha(int c);
#+end_src
** ft_isascii
#+begin_src C
int ft_isascii(int c);
#+end_src
** ft_isdigit
#+begin_src C
int ft_isdigit(int c);
#+end_src
** ft_isprint
#+begin_src C
int ft_isprint(int c);
#+end_src
** ft_strlen
#+begin_src C
size_t ft_strlen(const char *s);
#+end_src
** ft_memset
#+begin_src C
void    *ft_memset(void *s, int c, size_t n);
#+end_src
** ft_bzero
#+begin_src C
void    ft_bzero(void *s, size_t n);
#+end_src
** ft_memcpy
#+begin_src C
void    *ft_memcpy(void *dest, const void *src, size_t n);
#+end_src
*** Basic input
Basic use of the function.
*** Smaller n
Normal input but with n < strlen(input).
*** n = 0
Normal input but with n = 0.
*** destination & source the same
dst & src pointing on same address.
*** NULL destination
dst set to NULL.
*Behavior* on ubuntu: segfault.
*** NULL source
src set to NULL.
*Behavior* on ubuntu: segfault.
*** Both destination & source NULL
dst & src set to NULL.
*Behavior* on ubuntu: segfault.
** ft_memmove
#+begin_src C
void    *ft_memmove(void *dest, const void *src, size_t n);
#+end_src
*** Basic input
Basic use of the function.
*** destination & source the same
dst & src pointing on same address.
*** Overlapping : destination lower than source
dst address set to a lower address than src but with an overlapping size.
*** Overlapping : source lower than destination
src address set to a lower address than dst but with an overlapping size.
*** Smaller n
Normal input but with n < strlen(input).
*** n = 0
Normal input but with n = 0.
*** NULL destination
dst set to NULL.
*Behavior* on ubuntu: segfault.
*** NULL source
src set to NULL.
*Behavior* on ubuntu: segfault.
*** Both destination & source NULL
dst & src set to NULL.
*Behavior* on ubuntu: segfault.

** ft_strlcpy
#+begin_src C
size_t  ft_strlcpy(char *dst, const char *src, size_t size);
#+end_src
*** Basic input
Basic use of the function.
*Behavior*: copies size-1 bytes from src to dst + \0.
*Return value*: length of src.
*** Smaller size
Size smaller than src.
*Behavior*: copies size-1 bytes from src to dst + \0.
*Return value*: length of src.
*** Bigger size
Size bigger than src.
*Behavior*: copies only strlen(src) bytes from src to dst.
*Return value*: length of src.
*** Size zero
size = 0.
*Behavior*: doesn't copy anything.
*Return value*: length of src.
*** dst overlapping src
dst address set to a lower adress than src but with an overlapping size.
*Behavior*: copies size-1 bytes from src to dst + \0.
*Return value*: length of src (after the copy).
*** src overlapping dst
src address set to a lower adress than dst but with an overlapping size.
*Behavior*: copies size-1 bytes from src to dst + \0.
*Return value*: length of src (after the copy).
*** NULL dst
dst set to NULL.
*Behavior*: SEGFAULT.
*** NULL src
src set to NULL.
*Behavior*: SEGFAULT.
*** NULL dst & src
dst & src set to NULL.
*Behavior*: SEGFAULT.

** ft_strlcat
#+begin_src C
size_t  ft_strlcat(char *dst, const char *src, size_t size);
#+end_src
*** Basic input
Basic use of function.
*Behavior*: Copies size - len(dst) - 1 bytes from src to end of dst + \0.
*Return value*: Initial length of dst + length of src.
*** Smaller size
Size smaller than final buffer.
*Behavior*: Copies size - len(dst) - 1 bytes from src to end of dst + \0 (Truncation).
*Return value*: *Initial length of dst + length of src if size >= len(dst) else size + length of src.*
*** Smaller small size
Size smaller than len(dst).
*Behavior*: Doesn't copy anything.
*Return value*: *size + length of src.*
*** Bigger size
Size bigger than final buffer.
*Behavior*: Does the copy but stops at \0 of src.
*Return value*: Initial length of dst + length of src.
*** Size zero
Size = 0.
*Behavior*: Doesn't copy anything.
*Return value*: Length of src (same calculation than if size < len(dst)).
*** NULL dst
dst set to NULL.
*Behavior*: SEGFAULT.
*Return value*: /
*** NULL dst & size zero
dst set to NULL and size set to zero.
*Behavior*: Doesn't copy anything. (NO SEGFAULT).
*Return value*: length of src.
*** NULL src
src set to NULL.
*Behavior*: SEGFAULT.
*Return value*: /
*** NULL dst & src
dst & src set to NULL.
*Behavior*: SEGFAULT.
*Return value*: /
** ft_toupper
#+begin_src C
int ft_toupper(int c);
#+end_src
*** basic inputs (all unsigned char)
** ft_tolower
#+begin_src C
int ft_tolower(int c);
#+end_src
*** basic inputs (all unsigned char)
** ft_strchr
*** Basic inputs (c in s)
*** multiple c in s
*** no c in s
*** c set to '\0'
*** s set to NULL
** ft_strrchr
*** Basic inputs (c in s)
*** multiple c in s
*** no c in s
*** c set to '\0'
*** s set to NULL
** ft_strncmp
#+begin_src C
int ft_strncmp(const char *s1, const char *s2, size_t n);
#+end_src
*** Basic inputs s1 == s2
s1 & s2 the same.
*Return value*: 0
*** Basic inputs s1 != s2, n = len(s1) (s1 < s2)
s1 & s2 different, s1 less than s2
*Return value*: negative (s1[i] - s2[i])
*** Basic inputs s1 != s2, n = len(s1) (s1 > s2)
s1 & s2 different, s1 greater than s2
*Return value*: positive (s1[i] - s2[i])
*** len s1 < len s2
s1 & s2 the same until '\0' in s1. n set to length of s2.
*Return value*: negative (0 - s2[i])
*** len s1 > len s2
s1 & s2 the same until '\0' in s2. n set to length of s1.
*Return value*: positive (s1[i] - 0)
*** Smaller n
n smaller than the 2 lengths.
*Return value*: difference between n^{th} char of the 2 strings.
*** Bigger n
n bigger than the 2 lengths.
*Return value*: difference between last char of the smaller string and equivalent char of the other.
*** n = 0
n set to zero.
*Return value*: 0
*** not unsigned char inside strings
Insertion of values not initially unsigned char to test that the function casts to unsigned char.
*Return value*: diff as usual.
*** NULL s1, n > 0
s1 set to NULL with n > 0.
*Return value*: / (SEGFAULT)
*** NULL s2, n > 0
s2 set to NULL with n > 0.
*Return value*: / (SEGFAULT)
*** NULL s1 & s2, n > 0
s1 & s2 set to NULL with n > 0.
*Return value*: / (SEGFAULT)
*** NULL s1 & s2, n = 0
s1 & s2 set to NULL with n > 0.
*Return value*: 0 (NO SEGFAULT)
** ft_memchr
#+begin_src C
void    *ft_memchr(const void *s, int c, size_t n);
#+end_src
*** Basic with c in s
Normal use of the function with c placed in s.
*Return value*: pointer to first instance of c in s.
*** multiple c in s
Normal use of the function, c has multiple instances in s.
*Return value*: pointer to first instance of c in s.
*** c not in s
Normal use of the function, c not in s.
*Return value*: NULL.
*** c not unsigned char
Test the function with a non unsigned char value in c (present in s).
*Return value*: pointer to instance of c in s (only if c and s[i] are cast to unsigned char).
*** c set to '\0'
Search for '\0' ('\0' is also put in s).
*Return value*: pointer to '\0' in s.
*** Smaller n
Normal inputs but n smaller than s.
*Return value*: pointer to first instance of c but tests at most n bytes.
*** s set to NULL with n > 0
s set to NULL.
*Return value*: / (SEGFAULT).
*** s set to NULL with n = 0
s set to NULL and n to zero.
*Return value*: NULL.
** ft_memcmp
#+begin_src C
int ft_memcmp(const void *s1, const void *s2, size_t n);
#+end_src
*** Basic, s1 == s2
Basic use of the function, s1 and s2 beeing equal and n = len(s1).
*Return value*: 0.
*** Basic, s1 != s2 1
Basic use of the function, s1 and s2 differs (s1 < s2) and n = len(s1).
*Return value*: negative (s1[i] - s2[i]).
*** Basic, s1 != s2 2
Basic use of the function, s1 and s2 differs (s1 > s2) and n = len(s1).
*Return value*: positive (s1[i] - s2[i]).
*** byte zero in both strings
Both strings contain multiple '\0' inside and then a byte is different (s1 > s2).
*Return value*: positive.
*** n = 0
n set to zero.
*Return value*: 0.
*** s1 not unsigned char
s1 value set to an integer bigger than unsigned char.
*Return value*: Same as usual if values are casted to unsigned char.
*** s2 not unsigned char
s2 value set to an integer bigger than unsigned char.
*Return value*: Same as usual if values are casted to unsigned char.
*** NULL s1, n > 0
s1 set to NULL and n > 0.
*Return value*: / (SEGFAULT)
*** NULL s2, n > 0
s2 set to NULL and n > 0.
*Return value*: / (SEGFAULT)
*** NULL s1 & s2, n > 0
s1 & s2 set to NULL, n > 0.
*Return value*: / (SEGFAULT)
*** NULL s1 & s2, n = 0
s1 & s2 set to NULL, n = 0.
*Return value*: 0.
** ft_strnstr
#+begin_src C
char    *ft_strnstr(const char *big, const char *little, size_t len);
#+end_src
*** Basic inputs
string little contained in big and len = len(big).
*Return value*: pointer to first char of first occurrence of little in big.
*** little not in big
string little not contained in big.
*Return value*: NULL.
*** len = len(little)
len set len(little). len is contained in big but only after len.
*Return value*: NULL.
*** Smaller len
little contained in big but after len.
*Return value*: NULL.
*** Bigger len
little not contained in big and len > len(big).
*Return value*: NULL.
*** len = 0
len set to zero.
*Return value*: NULL.
*** big empty
big set to an empty string.
*Return value*: NULL.
*** little empty
little set to an empty string.
*Return value*: big.
*** big & little empty
little & big set to an empty string.
*Return value*: pointer to big.
*** NULL big, len > 0
big set to NULL.
*Return value*: / (SEGFAULT)
*** NULL big, len = 0
big set to NULL.
*Return value*: NULL.
*** NULL little, len > 0
little set to NULL.
*Return value*: / (SEGFAULT)
*** NULL little, len = 0
little set to NULL.
*Return value*: / (SEGFAULT)
*** NULL big & little, len > 0
big & little set to NULL with len > 0.
*Return value*: / (SEGFAULT)
*** NULL big & little, len = 0
big & little set to NULL with len = 0.
*Return value*: / (SEGFAULT)
** ft_atoi
#+begin_src C
int ft_atoi(const char *nptr);
#+end_src
*** Basic input
Simple number passed.
*Return value*: integer version of number in nptr.
*** negative integer
Negative number passed.
*Return value*: integer version of number in nptr.
*** Normal number with positive sign
Normal number with positive sign before.
*Return value*: integer version of number in nptr.
*** Multiple signs
Normal number with more than one signs before.
*Return value*: 0.
*** Whitespaces before sign
Normal number with multiple whitespaces before sign.
*Return value*: integer version of number in nptr.
*** Whitespaces after sign
Normal number with multiple whitespaces after sign.
*Return value*: 0.
*** Whitespace in number
Normal number with whitespaces after some numbers.
*Return value*: integer version of number before whitespaces.
*** Int min
Minimum integer passed.
*Return value*: integer version of number in nptr.
*** Int max
Maximum integer passed.
*Return value*: integer version of number in nptr.
*** Greater than int max
Number greater than int max passed.
*Return value*: equivalent value of number converted to int (bits).
*** Greater than unsigned int max
Number greater than unsigned int max passed.
*Return value*: -1
*** Empty nptr
nptr set to empty string.
*Return value*: 0.
*** NULL nptr
nptr set to NULL.
*Return value*: / (SEGFAULT)
** ft_calloc
#+begin_src C
void    *ft_calloc(size_t nmemb, size_t size);
#+end_src
*** normal allocation
Try to free memory allocated by ft_calloc with normal inputs.
*Behavior*: Allocation & initialization of memory.
*Return value*: pointer to memory.
*** check size
Normal values passed and size asked to malloc compared to right value.
*Behavior*: Allocation & initialization of memory.
*Return value*: pointer to memory.
*** malloc protection
Make malloc fail.
*Behavior*: No allocation.
*Return value*: NULL.
*** zero
nmemb & size set to 0.
*Behavior*: No allocation.
*Return value*: unique pointer value that can be passed to free().
*** Size too big
Too big size passed to ft_calloc.
*Behavior*: No allocation.
*Return value*: NULL for too big number (ULONG_MAX for ex.) and a pointer for int overflow.
** ft_strdup
#+begin_src C
char    *ft_strdup(const char *s);
#+end_src
*** basic input
Normal c string passed.
*Behavior*: s copied in new pointer allocated.
*Return value*: pointer to s.
*** malloc fail
Make malloc fail.
*Behavior*: s not copied because function stops after malloc fail.
*Return value*: NULL.
*** s empty
s allocated but empty string.
*Behavior*: empty string copied.
*Return value*: pointer to s.
*** NULL s
s set to NULL.
*Behavior*: CRASH
*Return value*: / (CRASH)
** ft_substr
#+begin_src C
char    *ft_substr(char const *s, unsigned int start, size_t len);
#+end_src
*** Basic inputs
Basic inputs passed to the function.
*Behavior*: copies string s from index start with length len.
*Return value*: the substring.
*** all string
start set to 0 & len set to strlen(s).
*Behavior*: copies string s from index start with length len.
*Return value*: the substring (same string as s).
*** Bigger len
Same inputs but with len > strlen(s) - start.
*Behavior*: copies string s from index start with length = length of s from start to '\0'.
*Return value*: the substring.
*** len zero
len set to 0.
*Behavior*: Copies empty string (copy = len - 1, last character beeing '\0').
*Return value*: the substring (empty string).
*** start > strlen(s)
start set to a greater number than strlen(s).
*Behavior*: Creates empty string.
*Return value*: the substring (empty string).
*** start = strlen(s)
start set to strlen(s).
*Behavior*: Creates empty string.
*Return value*: the substring (empty string).
*** s empty
s set to an empty string (start = 0 & len = 1)
*Behavior*: Copies empty string.
*Return value*: the substring (empty string).
*** NULL s
s set to NULL.
*Behavior*: No copy.
*Return value*: NULL.
*** malloc fail
Make malloc fail.
*Behavior*: No copy.
*Return value*: NULL.
** ft_strjoin
#+begin_src C
char    *ft_strjoin(char const *s1, char const *s2);
#+end_src
*** Basic inputs
s1 & s2 set to differents strings.
*Behavior*: allocation of a new string in which s1 + s2 are copied.
*Return value*: the new string.
*** malloc fail
make malloc fail.
*Behavior*: No copy.
*Return value*: NULL.
*** empty s1
s1 set to an empty string.
*Behavior*: allocation of a new string in which s1 + s2 are copied (so only s2).
*Return value*: the new string (=s2).
*** empty s2
s2 set to an empty string.
*Behavior*: allocation of a new string in which s1 + s2 are copied (so only s1).
*Return value*: the new string (=s1).
*** empty s1 & s2
s1 & s2 set to empty strings.
*Behavior*: allocation of a new string in which s1 + s2 are copied (so '\0').
*Return value*: the new string (='\0').
*** NULL s1
s1 set to NULL.
*Behavior*: Nothing.
*Return value*: NULL.
*** NULL s2
s2 set to NULL.
*Behavior*: Nothing.
*Return value*: NULL.
*** NULL s1 & s2
s1 & s2 set to NULL.
*Behavior*: Nothing.
*Return value*: NULL.
** ft_strtrim
#+begin_src C
char    *ft_strtrim(char const *s1, char const *set);
#+end_src
*** Basic inputs
Basic inputs passed to the function.
*Behavior*: s1 is trimmed and returned.
*Return value*: trimmed s1 (copy).
*** Characters in middle of s1
Characters of set only in the string (not at beginning or end).
*Behavior*: s1 is not modified.
*Return value*: s1 (copy).
*** No character of set in s1
No character of set present in s1.
*Behavior*: s1 is not modified.
*Return value*: s1 (copy).
*** Only characters of set in s1
s1 contains only characters from set.
*Behavior*: empty string copied.
*Return value*: empty string.
*** empty set
set set to an empty string.
*Behavior*: s1 is not modified.
*Return value*: s1 (copy).
*** emtpy s1
s1 set to an empty string.
*Behavior*: s1 is not modified.
*Return value*: s1 (copy).
*** malloc fail
Make malloc fail.
*Behavior*: Nothing.
*Return value*: NULL.
*** NULL s1
s1 set to NULL.
*Behavior*: Nothing.
*Return value*: NULL.
*** NULL set
set set to NULL.
*Behavior*: Nothing.
*Return value*: NULL.
*** NULL s1 & set
s1 & set set to NULL.
*Behavior*: Nothing.
*Return value*: NULL.
** ft_split
#+begin_src C
char    **ft_split(char const *s, char c);
#+end_src
*** Basic inputs
s set to a string containing multiple times c.
*Behavior*: s is split.
*Return value*: array of new strings.
*** c before & after string
s set to a string containing multiple times c plus before and after the string.
*Behavior*: s is split.
*Return value*: array of new strings (no empty string).
*** no c in string
s set to a string not containing c.
*Behavior*: s is split (only one string).
*Return value*: array of new string.
*** zero c
c set to zero ('\0').
*Behavior*: s is split (only one string).
*Return value*: array of new string.
*** empty s
s set to an empty string.
*Behavior*: s is split (only one string).
*Return value*: array of new string.
*** malloc fail
Make malloc fail.
*Behavior*: Nothing.
*Return value*: NULL.
*** NULL s
s set to NULL.
*Behavior*: Nothing.
*Return value*: NULL.
** TODO ft_itoa [0/6]
#+begin_src C
char    *ft_itoa(int n);
#+end_src
*** CODE Basic inputs
n set to a positive number.
*Return value*: string representing the integer.
*** CODE Negative n
n set to a negative number.
*Return value*: string representing the integer.
*** CODE Maximum int
n set to maximum int.
*Return value*: string representing the integer.
*** CODE Minimum int
n set to minimum int.
*Return value*: string representing the integer.
*** CODE n zero
n set to zero.
*Return value*: string representing the integer.
*** CODE malloc fail
Make malloc fail.
*Return value*: NULL.
** TODO ft_strmapi
** TODO ft_striteri
** TODO ft_putchar_fd
** TODO ft_putstr_fd
** TODO ft_putendl_fd
** TODO ft_putnbr_fd

* Bonus part
** ft_lstnew
** ft_lstadd_front
** ft_lstsize
** ft_lstlast
** ft_lastadd_back
** ft_lstdelone
** ft_lstclear
** ft_lstiter
** ft_lstmap
